extend type Query {
    #查询组织机构
    #(treeType:String)
    #scenes true为需要复制,false为不需要
    depts(status:Int,scenes:Boolean!):[Dept]
    #查询岗位
    posts(status:Int,scenes:Boolean!):[Dept]
    #查询人员详情  offset:跳过几条  first:取几条
    persons(upstreamTypeId:String,offset:Int,first:Int):PersonConnection
    #查询人员身份详情  offset:跳过几条  first:取几条
    occupies(upstreamTypeId:String,offset:Int,first:Int):OccupyConnection
    #预览人员  offset:跳过几条  first:取几条
    @deprecated(reason: "已废弃")
    preViewPersons(type:String,filter:PersonFilter ,offset:Int,first:Int):PersonConnection
    #预览人员身份  offset:跳过几条  first:取几条
    @deprecated(reason: "已废弃")
    preViewOccupies(type:String,filter:OccupyFilter,offset:Int,first:Int):OccupyConnection
    #刷新  type表示类型(person)
    @deprecated(reason: "已废弃")
    reFreshPersons(type:String):PreViewTask
    #刷新  type表示类型(occupy)
    @deprecated(reason: "已废弃")
    reFreshOccupies(type:String):PreViewTask
    #通过任务标识获取任务进行状态
    @deprecated(reason: "已废弃")
    reFreshTaskStatus(taskId:String):PreViewTask
}



# 组织机构实体
type Dept{

    # 机构类型代码
    code:String
    # 机构类型名称
    name:String
    #父级code
    parentCode:String
    # 来源
    source:String
    #
    treeType:String
    #类型
    type:String
    #标签
    tags:String
    #代表色
    color:String
    #是否有规则
    isRuled:Boolean
    #    #组织机构类型id
    #    deptTreeTypeId:String
    #    #ruleId
    #    ruleId:String

}


#分页结构###
type PersonConnection{
    edges: [PersonEdge]
    totalCount: Int
    updateTime:Timestamp
}

type PersonEdge{
    node: Person
}

type Person{
    #姓名
    name:String
    #用户名
    accountNo:String
    #身份类型
    cardType:String
    #身份编码
    cardNo:String
    #标签
    tags:String
    #租户id
    tenantId:String
    #电话
    cellphone:String
    #邮箱
    email:String
    #密码
    password:String
    #是否有效
    active:Int
    #是否删除
    delMark:Int
    #扩展字段
    attrsValues : [DynamicValue]
    #同步后状态 0 无变化 1 新增 2 修改 3 删除 4 失效
    syncState :Int
    # 来源
    source:String
    # 数据来源
    dataSource:String
    # 创建来源
    createSource:String
    # 创建数据来源
    createDataSource:String
    # 人员唯一标识
    openId:String
}


#分页结构###
type OccupyConnection{
    edges: [OccupyEdge]
    totalCount: Int
}

type OccupyEdge{
    node: Occupy
}
type Occupy{
    #岗位代码
    postCode:String
    #部门代码
    deptCode:String
    #证件类型
    personCardType:String
    #证件代码
    personCardNo:String
    #用户名
    accountNo:String
    #身份证件类型
    identityCardType:String
    #身份证件号码
    identityCardNo:String
    #有效期开始时间
    startTime:Timestamp
    #有效期结束时间
    endTime:Timestamp
    #最终有效期开始时间
    validStartTime:Timestamp
    #最终有效期结束时间
    validEndTime:Timestamp
    #描述
    description: String
    #是否有效
    active:Int
    #是否删除
    delMark:Int
    #排序
    index:Int
    #扩展字段
    attrsValues : [DynamicValue]
    #同步后状态 0 无变化 1 新增 2 修改 3 删除 4 失效
    syncState :Int
    # 来源
    source:String
    # 数据来源
    dataSource:String
    # 创建来源
    createSource:String
    # 创建数据来源
    createDataSource:String
    # 人员唯一标识
    openId: String

}

type DynamicValue{
    #key值
    key : String
    #代码
    code : String
    #值
    value : String
}

input PersonFilter{
    active:booleanFilter
    name:stringFilter
    username:stringFilter
    cardNo:stringFilter
    email:stringFilter
    phone:stringFilter
}

input OccupyFilter{
    active:booleanFilter
    name:stringFilter
    username:stringFilter
    cardNo:stringFilter
    positionCardNo:stringFilter
    positionEndTime:timestampFilter
    positionStartTime:timestampFilter
    deptCode:stringFilter
    postCode:stringFilter
}







